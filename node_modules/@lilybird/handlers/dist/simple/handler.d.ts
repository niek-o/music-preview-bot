import type { GlobalApplicationCommand, GuildApplicationCommand } from "./application-command.js";
import type { DefaultTransformers } from "@lilybird/transformers";
import type { MessageCommand } from "./message-commands.js";
import type { Event } from "./events.js";
import type { ClientListeners, ClientOptions, Client } from "lilybird";
interface HandlerDirectories {
    slashCommands?: string;
    messageCommands?: string;
    listeners?: string;
}
export declare class Handler {
    #private;
    protected readonly guildApplicationCommands: Map<string, GuildApplicationCommand>;
    protected readonly globalApplicationCommands: Map<string, GlobalApplicationCommand>;
    protected readonly messageCommands: Map<string, MessageCommand>;
    protected readonly events: Map<string, Event<"raw" | "ready" | "resumed" | "applicationCommandPermissionsUpdate" | "autoModerationRuleCreate" | "autoModerationRuleUpdate" | "autoModerationRuleDelete" | "autoModerationActionExecution" | "channelCreate" | "channelUpdate" | "channelDelete" | "channelPinsUpdate" | "threadCreate" | "threadUpdate" | "threadDelete" | "threadListSync" | "threadMemberUpdate" | "threadMembersUpdate" | "guildCreate" | "guildUpdate" | "guildDelete" | "guildAuditLogEntryCreate" | "guildBanAdd" | "guildBanRemove" | "guildEmojisUpdate" | "guildStickersUpdate" | "guildIntegrationsUpdate" | "guildMemberAdd" | "guildMemberRemove" | "guildMemberUpdate" | "guildMembersChunk" | "guildRoleCreate" | "guildRoleUpdate" | "guildRoleDelete" | "guildScheduledEventCreate" | "guildScheduledEventUpdate" | "guildScheduledEventDelete" | "guildScheduledEventUserAdd" | "guildScheduledEventUserRemove" | "integrationCreate" | "integrationUpdate" | "integrationDelete" | "interactionCreate" | "inviteCreate" | "inviteDelete" | "messageCreate" | "messageUpdate" | "messageDelete" | "messageDeleteBulk" | "messageReactionAdd" | "messageReactionRemove" | "messageReactionRemoveAll" | "messageReactionRemoveEmoji" | "presenceUpdate" | "stageInstanceCreate" | "stageInstanceUpdate" | "stageInstanceDelete" | "typingStart" | "userUpdate" | "voiceStateUpdate" | "voiceServerUpdate" | "webhookUpdate" | "messagePollVoteAdd" | "messagePollVoteRemove", Required<ClientListeners<DefaultTransformers>>>>;
    protected readonly messageCommandAliases: Map<string, string>;
    protected readonly dirs: HandlerDirectories;
    protected readonly prefix: string;
    constructor(dirs: HandlerDirectories, prefix?: string);
    registerGlobalCommands(client: Client): Promise<void>;
    registerGuildCommands(client: Client): Promise<void>;
    readSlashCommandDir(dir?: string | undefined): Promise<boolean>;
    readEventDir(dir?: string | undefined): Promise<boolean>;
    readMessageCommandDir(dir?: string | undefined): Promise<boolean>;
    private onInteraction;
    private onMessage;
    buildListeners(): Promise<ClientListeners<DefaultTransformers>>;
}
type Expand<T> = T extends (...args: Array<any>) => any ? T : {
    [K in keyof T]: T[K];
};
export declare function createHandler({ dirs, prefix }: {
    dirs: HandlerDirectories;
    prefix?: string | undefined;
}): Promise<Expand<Pick<Required<ClientOptions<DefaultTransformers>>, "listeners" | "transformers" | "setup" | "customCacheKeys">>>;
export {};
//# sourceMappingURL=handler.d.ts.map