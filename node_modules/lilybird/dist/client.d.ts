import { REST } from "./http/rest.js";
import type { UpdatePresenceStructure, CacheManagerStructure, ParseCachingManager, BaseClientOptions, ClientOptions, DebugFunction, Transformers, Application } from "./typings/index.js";
type GetUserType<T extends Transformers> = (T["userUpdate"] & {}) extends {
    handler: ((...args: infer U) => infer R);
} ? unknown extends R ? U[1] : R : never;
export interface Client<T extends Transformers> {
    readonly user: GetUserType<T>;
    readonly sessionId: string;
    readonly application: Application.Structure;
}
export declare class Client<T extends Transformers = Transformers, C extends CacheManagerStructure = CacheManagerStructure> {
    #private;
    readonly rest: REST;
    readonly cache: C;
    protected readonly ready: boolean;
    constructor(options: BaseClientOptions<T>, debug?: DebugFunction);
    login(token: string): Promise<string>;
    close(): void;
    setPresence(presence: UpdatePresenceStructure): void;
    ping(): Promise<{
        ws: number;
        rest: number;
    }>;
}
export declare function createClient<T extends Transformers, O extends ClientOptions<T> = ClientOptions<T>>(options: O): Promise<Client<T, ParseCachingManager<O>>>;
export {};
//# sourceMappingURL=client.d.ts.map